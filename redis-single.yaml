---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release11-redis
  labels:
    app: redis
    chart: redis-9.1.11
    heritage: Tiller
    release: release11
data:
  redis.conf: |-
    appendonly yes
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release11-redis-health
  labels:
    app: redis
    chart: redis-9.1.11
    heritage: Tiller
    release: release11
data:
  ping_readiness_local.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release11-redis
  labels:
    app: redis
    chart: redis-9.1.11
    release: release11
    heritage: Tiller
---
apiVersion: v1
kind: Service
metadata:
  name: release11-redis
  labels:
    app: redis
    chart: redis-9.1.11
    release: release11
    heritage: Tiller
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: release11
    role: master
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release11-redis
  labels:
    app: redis
    chart: redis-9.1.11
    release: release11
    heritage: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      release: release11
      role: master
  template:
    metadata:
      labels:
        app: redis
        chart: redis-9.1.11
        release: release11
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      serviceAccountName: "release11-redis"
      nodeSelector:
        # fix
        kubernetes.io/hostname: n32.dev
      initContainers:
      - name: init-sysctl
        image: busybox:1.31.0
        command: ["sh", "-c", "chown -R 1001:1001 /data && sysctl -w net.core.somaxconn=10000 && echo never > /sys/kernel/mm/transparent_hugepage/enabled && sleep 1"]
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: host-sys
          mountPath: /sys
          readOnly: false  
        securityContext:
          privileged: true
          runAsUser: 0

      containers:
      - name: release11-redis
        image: "docker.io/bitnami/redis:5.0.5-debian-9-r138"
        imagePullPolicy: "IfNotPresent"
        securityContext:
          runAsUser: 1001
        command:
        - /bin/bash
        - -c
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
          fi
          if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
          fi
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--protected-mode" "no")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
          /run.sh ${ARGS[@]}
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        - name: REDIS_PORT
          value: "6379"
        ports:
        - name: redis
          containerPort: 6379
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_readiness_local.sh 5
        resources:
          null
          
        volumeMounts:
        - name: health
          mountPath: /health
        - name: redis-data
          mountPath: /data
          subPath: 
        - name: config
          mountPath: /opt/bitnami/redis/mounted-etc
        - name: redis-tmp-conf
          mountPath: /opt/bitnami/redis/etc/
      volumes:
      - name: health
        configMap:
          name: release11-redis-health
          defaultMode: 0755
      - name: config
        configMap:
          name: release11-redis
      - name: "redis-data"
        #emptyDir: {}
        hostPath:
          path: /data/redis-data
      - name: redis-tmp-conf
        emptyDir: {}
      - name: host-sys
        hostPath:
          path: /sys